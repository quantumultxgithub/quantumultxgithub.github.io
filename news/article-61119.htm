<!doctype html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://quantumultxgithub.github.io/news/article-61119.htm" />
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>KestrelServer网络连接的创建详解</title>
        <meta name="description" content="《注册监听终结点（Endpoint）》已经详细讲述了如何使用KestrelServer，现在我们来简单聊聊这种处理器的总体设计和实现原理。当KestrelServer启动的时候，注册的每个终结点将转换" />
        <link rel="icon" href="/assets/website/img/quantumultxgithub/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="QuantumultX Github(圈X)节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://quantumultxgithub.github.io/news/article-61119.htm" />
    <meta property="og:site_name" content="QuantumultX Github(圈X)节点订阅官网" />
    <meta property="og:title" content="KestrelServer网络连接的创建详解" />
    <meta property="og:image" content="https://quantumultxgithub.github.io/uploads/20240814-1/47acfd557b032832f6b85590bd907a5c.webp" />
        <meta property="og:release_date" content="2025-02-22T07:12:26" />
    <meta property="og:updated_time" content="2025-02-22T07:12:26" />
        <meta property="og:description" content="《注册监听终结点（Endpoint）》已经详细讲述了如何使用KestrelServer，现在我们来简单聊聊这种处理器的总体设计和实现原理。当KestrelServer启动的时候，注册的每个终结点将转换" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="KestrelServer网络连接的创建详解">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- CSS here -->
    <link rel="stylesheet" href="/assets/website/css/quantumultxgithub/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/quantumultxgithub/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/quantumultxgithub/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/quantumultxgithub/slicknav.css">
    <link rel="stylesheet" href="/assets/website/css/quantumultxgithub/animate.min.css">
    <link rel="stylesheet" href="/assets/website/css/quantumultxgithub/magnific-popup.css">
    <link rel="stylesheet" href="/assets/website/css/quantumultxgithub/fontawesome-all.min.css">
    <link rel="stylesheet" href="/assets/website/css/quantumultxgithub/themify-icons.css">
    <link rel="stylesheet" href="/assets/website/css/quantumultxgithub/slick.css">
    <link rel="stylesheet" href="/assets/website/css/quantumultxgithub/nice-select.css">
    <link rel="stylesheet" href="/assets/website/css/quantumultxgithub/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-48H5VGRJD7"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-48H5VGRJD7');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Preloader Start -->
    <div id="preloader-active">
        <div class="preloader d-flex align-items-center justify-content-center">
            <div class="preloader-inner position-relative">
                <div class="preloader-circle"></div>
                <div class="preloader-img pere-text">
                    <img src="/assets/website/img/quantumultxgithub/logo/logo.png" alt="">
                </div>
            </div>
        </div>
    </div>
    <!-- Preloader Start -->
    <header>
        <!-- Header Start -->
        <div class="header-area">
            <div class="main-header ">
                <div class="header-bottom  header-sticky">
                    <div class="container-fluid">
                        <div class="row align-items-center">
                            <!-- Logo -->
                            <div class="col-lg-4 col-md-4">
                                <div class="logo">
                                    <a href="/">
                                                                        <span>QuantumultX Github</span>
                                                                        </a>
                                </div>
                            </div>
                            <div class="col-lg-8 col-md-8">
                                <!-- Main-menu -->
                                <div class="main-menu f-right d-none d-lg-block">
                                    <nav>
                                        <ul id="navigation">
                                                                                        <li><a href="/">首页</a></li>
                                                                                        <li><a href="/free-nodes/">免费节点</a></li>
                                                                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                                        <li><a href="/client.htm">客户端</a></li>
                                                                                        <li><a href="/news/">新闻资讯</a></li>
                                                                                    </ul>
                                    </nav>
                                </div>
                            </div>
                            <!-- Mobile Menu -->
                            <div class="col-12">
                                <div class="mobile_menu d-block d-lg-none"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Header End -->
    </header>
    <main>
        <!-- slider Area Start-->
        <div class="slider-area ">
            <!-- Mobile Menu -->
            <div class="single-slider slider-height2 d-flex align-items-center" data-background="/assets/website/img/quantumultxgithub/hero/contact_hero.jpg">
                <div class="container">
                    <div class="row">
                        <div class="col-xl-12">
                            <div class="hero-cap text-center">
                                <h1>KestrelServer网络连接的创建详解</h1>
                                <p class="desc">
                                    <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- slider Area End-->
        <!-- We Trusted Start-->
        <div class="we-trusted-area trusted-padding">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="QuantumultX Node(圈X)官方节点站" data-url="https://quantumultxnode.github.io">
                  				  				  				<p>《<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/artech/p/inside-asp-net-core-6-29.html"  rel="nofollow">注册监听终结点（Endpoint）</a>》已经详细讲述了如何使用KestrelServer，现在我们来简单聊聊这种处理器的总体设计和实现原理。当KestrelServer启动的时候，注册的每个终结点将转换成对应的“连接监听器”，后者在监听到初始请求时会创建“连接”，请求的接收和响应的回复都在这个连接中完成。本文提供的示例演示已经同步到《<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/artech/p/inside-asp-net-core-6.html"  rel="nofollow">ASP.NET Core 6框架揭秘-实例演示版</a>》）</p> </h1> <p>监听器创建的连接时一个抽象的概念，我们可以将其视为客户端和服务端完成消息交换而构建的“上下文”，该上下文通过如下这个ConnectionContext类型表示。ConnectionContext派生于抽象基类BaseConnectionContext，后者实现了IAsyncDisposable接口。每个连接具有一个通过ConnectionId属性表示的ID，它的LocalEndPoint和RemoteEndPoint属性返回本地（服务端）和远程（客户端）终结点。服务器提供的特性集合体现在它的Features属性上，另一个Items提供了一个存放任意属性的字典。ConnectionClosed属性提供的CancellationToken可以用来接收连接关闭的通知。Abort方法可以中断当前连接，这两个方法在ConnectionContext被重写。ConnectionContext类型的Transport属性提供的IDuplexPipe对象是用来对请求和响应进行读写的双向管道。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 255, 1)">class</span> ConnectionContext : BaseConnectionContext {<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span> IDuplexPipe Transport {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">override</span><span style="color: rgba(0, 0, 255, 1)">void</span> Abort(ConnectionAbortedException abortReason);<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">override</span><span style="color: rgba(0, 0, 255, 1)">void</span> Abort(); }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 255, 1)">class</span> BaseConnectionContext : IAsyncDisposable {<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">virtual</span> EndPoint? LocalEndPoint {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">virtual</span> EndPoint? RemoteEndPoint {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 255, 1)">string</span> ConnectionId {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span> IFeatureCollection Features {<span style="color: rgba(0, 0, 255, 1)">get</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span> IDictionary&lt;<span style="color: rgba(0, 0, 255, 1)">object</span>,<span style="color: rgba(0, 0, 255, 1)">object</span>?&gt; Items {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">virtual</span> CancellationToken ConnectionClosed {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 255, 1)">void</span> Abort();<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 255, 1)">void</span> Abort(ConnectionAbortedException abortReason);<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">virtual</span> ValueTask DisposeAsync(); }</pre> </div> <p>如果采用HTTP 1.X和HTTP 2协议，KestrelServer会采用TCP套接字（Socket）进行通信，对应的连接体现为一个SocketConnection对象。如果采用的是HTTP 3，会采用基于UDP的QUIC协议进行通信，对应的连接体现为一个QuicStreamContext对象。如下面的代码片段所示，这两个类型都派生于TransportConnection，后者派生于ConnectionContext。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 255, 1)">class</span> TransportConnection : ConnectionContext<span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">sealed</span><span style="color: rgba(0, 0, 255, 1)">class</span> SocketConnection : TransportConnection<span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">sealed</span><span style="color: rgba(0, 0, 255, 1)">class</span> QuicStreamContext : TransportConnection</pre> </div> </h1> <p>KestrelServer同时支持三个版本的HTTP协议，HTTP 1.X和HTTP 2建立在TCP协议之上，针对这样的终结点会转换成通过如下这个IConnectionListener接口表示的监听器。它的EndPoint属性表示监听器绑定的终结点，当AcceptAsync方法被调用时，监听器便开始了网络监听工作。当来自某个客户端端的初始请求抵达后，它会将创建代表连接的ConnectionContext上下文创建出来。另一个UnbindAsync方法用来解除终结点绑定，并停止监听。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">interface</span> IConnectionListener : IAsyncDisposable {     EndPoint EndPoint {<span style="color: rgba(0, 0, 255, 1)">get</span>; }     ValueTask&lt;ConnectionContext?&gt; AcceptAsync(CancellationToken cancellationToken =<span style="color: rgba(0, 0, 255, 1)">default</span>(CancellationToken));     ValueTask UnbindAsync(CancellationToken cancellationToken =<span style="color: rgba(0, 0, 255, 1)">default</span>(CancellationToken)); }</pre> </div> <p>QUIC利用传输层的UDP协议实现了真正意义上的“多路复用”，所以它将对应的连接监听器接口命名为IMultiplexedConnectionListener。它的AcceptAsync方法创建的是代表多路复用连接的MultiplexedConnectionContext对象，后者的AcceptAsync会将ConnectionContext上下文创建出来。QuicConnectionContext 类型是对MultiplexedConnectionContext的具体实现，它的AcceptAsync方法创建的就是上述的QuicStreamContext对象，该类型派生于抽象类TransportMultiplexedConnection。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">interface</span> IMultiplexedConnectionListener : IAsyncDisposable {     EndPoint EndPoint {<span style="color: rgba(0, 0, 255, 1)">get</span>; }     ValueTask&lt;MultiplexedConnectionContext?&gt; AcceptAsync(IFeatureCollection? features =<span style="color: rgba(0, 0, 255, 1)">null</span>,CancellationToken cancellationToken =<span style="color: rgba(0, 0, 255, 1)">default</span>(CancellationToken));     ValueTask UnbindAsync(CancellationToken cancellationToken =<span style="color: rgba(0, 0, 255, 1)">default</span>(CancellationToken)); }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 255, 1)">class</span> MultiplexedConnectionContext : BaseConnectionContext {<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span> ValueTask&lt;ConnectionContext?&gt; AcceptAsync(CancellationToken cancellationToken =<span style="color: rgba(0, 0, 255, 1)">default</span>(CancellationToken));<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span> ValueTask&lt;ConnectionContext&gt; ConnectAsync(IFeatureCollection? features =<span style="color: rgba(0, 0, 255, 1)">null</span>,CancellationToken cancellationToken =<span style="color: rgba(0, 0, 255, 1)">default</span>(CancellationToken)); }<span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 255, 1)">class</span> TransportMultiplexedConnection : MultiplexedConnectionContext<span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">sealed</span><span style="color: rgba(0, 0, 255, 1)">class</span> QuicConnectionContext : TransportMultiplexedConnection</pre> </div> <p>KestrelServer使用的连接监听器均由对应的工厂来构建。如下所示的IConnectionListenerFactory接口代表用来构建IConnectionListener监听器的工厂，IMultiplexedConnectionListenerFactory工厂则用来构建IMultiplexedConnectionListener监听器。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">interface</span> IConnectionListenerFactory {     ValueTask&lt;IConnectionListener&gt; BindAsync(EndPoint endpoint,CancellationToken cancellationToken =<span style="color: rgba(0, 0, 255, 1)">default</span>(CancellationToken)); }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">interface</span> IMultiplexedConnectionListenerFactory {     ValueTask&lt;IMultiplexedConnectionListener&gt; BindAsync(EndPoint endpoint, IFeatureCollection? features =<span style="color: rgba(0, 0, 255, 1)">null</span>,CancellationToken cancellationToken =<span style="color: rgba(0, 0, 255, 1)">default</span>(CancellationToken)); }</pre> </div> </h1> <p>上面围绕着“连接”介绍了一系列接口和类型，它们之间的关系体现在如图1所示的UML中。KestrelServer启动时会根据每个终结点支持的HTTP协议利用IConnectionListenerFactory或者IMultiplexedConnectionListenerFactory工厂来创建代表连接监听器的IConnectionListener或者IMultiplexedConnectionListener对象。IConnectionListener监听器会直接将代表连接的ConnectionContext上下文创建出来，IMultiplexedConnectionListener监听器创建的则是一个MultiplexedConnectionContext上下文，代表具体连接的ConnectionContext上下文会进一步由该对象进行创建。</p> <p><a href="https://img2022.cnblogs.com/blog/19327/202203/19327-20220328221751957-1119072478.png" rel="nofollow" class="fancybox" data-fancybox-group="button"><img fetchpriority="high" decoding="async" width="794" height="387" title="image" style="border: 0 currentColor; border-image: none; display: inline; background-image: none" alt="image" src="http://img.555519.xyz/uploads3/20220510/47393bff4c4b89a47436c7e5d9be4b2e.jpg"></a><br />图1 “连接”相关的接口和类型</p> </h1> <p>下面演示的实例直接利用IConnectionListenerFactory工厂创建的IConnectionListener监听器来监听连接请求，并利用建立的连接来接收请求和回复响应。由于表示连接的ConnectionContext上下文直接面向传输层，接受的请求和回复的响应都体现为二进制流，解析二进制数据得到请求信息是一件繁琐的事情。这里我们借用了“HttpMachine”NuGet包提供的HttpParser组件来完成这个任务，为此我们为它定义了如下这个HttpParserHandler类型。如果将这个HttpParserHandler对象传递给HttpParser对象，后者在请求解析过程中会调用前者相应的方法，我们利用这些方法利用读取的内容将描述请求的HttpRequestFeature特性构建出来。源代码可以从<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/jiangjinnan/InsideAspNet6/tree/main/18/S1803"  rel="nofollow">这里</a>查看。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> HttpParserHandler : IHttpParserHandler {<span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">string</span>? headerName =<span style="color: rgba(0, 0, 255, 1)">null</span>;<span style="color: rgba(0, 0, 255, 1)">public</span> HttpRequestFeature Request {<span style="color: rgba(0, 0, 255, 1)">get</span>; } =<span style="color: rgba(0, 0, 255, 1)">new</span> HttpRequestFeature();<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> OnBody(HttpParser parser, ArraySegment&lt;<span style="color: rgba(0, 0, 255, 1)">byte</span>&gt; data) =&gt; Request.Body =<span style="color: rgba(0, 0, 255, 1)">new</span> MemoryStream(data.Array!, data.Offset, data.Count);<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> OnFragment(HttpParser parser,<span style="color: rgba(0, 0, 255, 1)">string</span> fragment) { }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> OnHeaderName(HttpParser parser,<span style="color: rgba(0, 0, 255, 1)">string</span> name) =&gt; headerName = name;<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> OnHeadersEnd(HttpParser parser) { }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> OnHeaderValue(HttpParser parser,<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 255, 1)">value</span>) =&gt; Request.Headers[headerName!] =<span style="color: rgba(0, 0, 255, 1)">value</span>;<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> OnMessageBegin(HttpParser parser) { }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> OnMessageEnd(HttpParser parser) { }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> OnMethod(HttpParser parser,<span style="color: rgba(0, 0, 255, 1)">string</span> method) =&gt; Request.Method = method;<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> OnQueryString(HttpParser parser,<span style="color: rgba(0, 0, 255, 1)">string</span> queryString) =&gt; Request.QueryString = queryString;<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> OnRequestUri(HttpParser parser,<span style="color: rgba(0, 0, 255, 1)">string</span> requestUri) =&gt; Request.Path = requestUri; }</pre> </div> <p>如下所示的演示程序利用WebApplication对象的Services属性提供的IServicePovider对象来提供IConnectionListenerFactory工厂。我们调用该工厂的BindAsync方法创建了一个连接监听器并将其绑定到采用5000端口本地终结点。在一个无限循环中，我们调用监听器的AcceptAsync方法开始监听连接请求，并最终将代表连接的ConnectionContext上下文创建出来。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">using</span> App;<span style="color: rgba(0, 0, 255, 1)">using</span> HttpMachine;<span style="color: rgba(0, 0, 255, 1)">using</span> Microsoft.AspNetCore.Connections;<span style="color: rgba(0, 0, 255, 1)">using</span> Microsoft.AspNetCore.Http.Features;<span style="color: rgba(0, 0, 255, 1)">using</span> System.Buffers;<span style="color: rgba(0, 0, 255, 1)">using</span> System.IO.Pipelines;<span style="color: rgba(0, 0, 255, 1)">using</span> System.Net;<span style="color: rgba(0, 0, 255, 1)">using</span> System.Text;  var factory = WebApplication.Create().Services.GetRequiredService&lt;IConnectionListenerFactory&gt;(); var listener = await factory.BindAsync(<span style="color: rgba(0, 0, 255, 1)">new</span> IPEndPoint(IPAddress.Any, 5000));<span style="color: rgba(0, 0, 255, 1)">while</span> (<span style="color: rgba(0, 0, 255, 1)">true</span>) {     var context = await listener.AcceptAsync();     _ = HandleAsync(context!);<span style="color: rgba(0, 0, 255, 1)">static</span> async Task HandleAsync(ConnectionContext connection)     {         var reader = connection!.Transport.Input;<span style="color: rgba(0, 0, 255, 1)">while</span> (<span style="color: rgba(0, 0, 255, 1)">true</span>)         {             var result = await reader.ReadAsync();             var request = ParseRequest(result);             reader.AdvanceTo(result.Buffer.End);             Console.WriteLine("<span style="color: rgba(139, 0, 0, 1)">[{0}]Receive request: {1} {2} Connection:{3}</span>",connection.ConnectionId, request.Method, request.Path, request.Headers?["<span style="color: rgba(139, 0, 0, 1)">Connection</span>"] ?? "<span style="color: rgba(139, 0, 0, 1)">N/A</span>");              var response = @"<span style="color: rgba(139, 0, 0, 1)">HTTP/1.1 200 OK Content-Type: text/plain; charset=utf-8 Content-Length: 12  Hello World!</span>";             await connection.Transport.Output.WriteAsync(Encoding.UTF8.GetBytes(response));<span style="color: rgba(0, 0, 255, 1)">if</span> (request.Headers.TryGetValue("<span style="color: rgba(139, 0, 0, 1)">Connection</span>",<span style="color: rgba(0, 0, 255, 1)">out</span> var<span style="color: rgba(0, 0, 255, 1)">value</span>) &amp;&amp;<span style="color: rgba(0, 0, 255, 1)">string</span>.Compare(<span style="color: rgba(0, 0, 255, 1)">value</span>, "<span style="color: rgba(139, 0, 0, 1)">close</span>",<span style="color: rgba(0, 0, 255, 1)">true</span>) == 0)             {                 await connection.DisposeAsync();<span style="color: rgba(0, 0, 255, 1)">return</span>;             }<span style="color: rgba(0, 0, 255, 1)">if</span> (result.IsCompleted)             {<span style="color: rgba(0, 0, 255, 1)">break</span>;             }         }     }<span style="color: rgba(0, 0, 255, 1)">static</span>  HttpRequestFeature ParseRequest(ReadResult result)     {         var handler =<span style="color: rgba(0, 0, 255, 1)">new</span> HttpParserHandler();         var parserHandler =<span style="color: rgba(0, 0, 255, 1)">new</span> HttpParser(handler);         parserHandler.Execute(<span style="color: rgba(0, 0, 255, 1)">new</span> ArraySegment&lt;<span style="color: rgba(0, 0, 255, 1)">byte</span>&gt;(result.Buffer.ToArray()));<span style="color: rgba(0, 0, 255, 1)">return</span> handler.Request;     } }</pre> </div> <p>针对连接的处理实现在HandleAsync方法中。HTTP 1.1默认会采用长连接，多个请求会使用同一个连接发送过来，所以针对单个请求的接收和处理会放在一个循环中，直到连接被关闭。请求的接收利用ConnectionContext对象的Transport属性返回的IDuplexPipe对象来完成。简单起见，我们假设每个请求的读取刚好能够一次完成，所以每次读取的二进制刚好是一个完整的请求。读取的二进制内容利用ParseRequest方法借助于HttpParser对象转换成HttpRequestFeature对象后，我们直接生成一个表示响应报文的字符串并采用UTF-8对其编码，编码后的响应利用上述的IDuplexPipe对象发送出去。这份手工生成的“Hello World！”响应将以图18-5的形式呈现在浏览器上。</p> <p><a href="https://img2022.cnblogs.com/blog/19327/202203/19327-20220328221752757-74691511.png" rel="nofollow" class="fancybox" data-fancybox-group="button"><img decoding="async" width="515" height="217" title="image" style="border: 0 currentColor; border-image: none; display: inline; background-image: none" alt="image" src="http://img.555519.xyz/uploads3/20220510/67729ab7437c21b77390fdcb8b0b5f8a.jpg"></a><br />图2 面向“连接”编程</p> <p>按照HTTP 1.1规范的约定，如果客户端希望关闭默认开启的长连接，可以在请求中添加“Connection:Close”报头。HandleAsync方法在处理每个请求时会确定是否携带了此报头，并在需要的时候调用ConnectionContext上下文的 DisposeAsync方法关闭并释放当前连接。该方法在对请求进行处理时会将此报头和连接的ID输出到控制台上。图2所示的控制台输出是先后接收到三次请求的结果，后面两次显式添加了“Connection:Close”，可以看出前两次复用同一个连接。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-60520.htm">开宠物店投资大吗（开宠物店好吗）</a></p>
                                        <p>下一个：<a href="/news/article-61120.htm">移动制砂机一套多少钱一台（制砖机生产厂家）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-25333.htm" title="动物疫苗公司产量排名前十 动物疫苗公司产量排名前十名">动物疫苗公司产量排名前十 动物疫苗公司产量排名前十名</a></li>
                        <li class="py-2"><a href="/news/article-53238.htm" title="C/C++标准格式、输入输出及main函数的作用">C/C++标准格式、输入输出及main函数的作用</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-8-today-quantumult-x-node.htm" title="「1月8日」最高速度20.1M/S，2025年QuantumultX(圈X)每天更新免费订阅地址分享">「1月8日」最高速度20.1M/S，2025年QuantumultX(圈X)每天更新免费订阅地址分享</a></li>
                        <li class="py-2"><a href="/news/article-23493.htm" title="养猫容易感染什么病菌（养猫容易感染什么病毒）">养猫容易感染什么病菌（养猫容易感染什么病毒）</a></li>
                        <li class="py-2"><a href="/news/article-22106.htm" title="docker离线配置安装">docker离线配置安装</a></li>
                        <li class="py-2"><a href="/news/article-55419.htm" title="动物医院手续流程图片（动物医院看病流程）">动物医院手续流程图片（动物医院看病流程）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-28-free-node-subscribe.htm" title="「12月28日」最高速度19.1M/S，2024年QuantumultX(圈X)每天更新免费订阅地址分享">「12月28日」最高速度19.1M/S，2024年QuantumultX(圈X)每天更新免费订阅地址分享</a></li>
                        <li class="py-2"><a href="/news/article-36675.htm" title="被猫抓了一下红色划痕没破皮有点痛（被猫抓了有红色抓痕,没破皮）">被猫抓了一下红色划痕没破皮有点痛（被猫抓了有红色抓痕,没破皮）</a></li>
                        <li class="py-2"><a href="/news/article-33810.htm" title="动物医院都有什么部门管理的（动物医院监管部门）">动物医院都有什么部门管理的（动物医院监管部门）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-24-free-quantumult-x-node.htm" title="「11月24日」最高速度22.5M/S，2024年QuantumultX(圈X)每天更新免费机场订阅节点链接">「11月24日」最高速度22.5M/S，2024年QuantumultX(圈X)每天更新免费机场订阅节点链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">72</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
        <!-- We Trusted End-->
    </main>
        <footer>
        <div class="footer-bottom-area footer-bg">
            <div class="container">
                <div class="footer-border">
                    <div class="row d-flex align-items-center">
                        <div class="col-xl-12 ">
                            <div class="footer-copy-right text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                                <p>
                                    <a href="/">QuantumultX Github(圈X)节点订阅官网</a> 版权所有 Powered by WordPress
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Footer End-->
    </footer>
    <!-- JS here -->
    <!-- All JS Custom Plugins Link Here here -->
    <script src="/assets/website/js/frontend/quantumultxgithub/vendor/modernizr-3.5.0.min.js"></script>
    <!-- Jquery, Popper, Bootstrap -->
    <script src="/assets/website/js/frontend/quantumultxgithub/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/quantumultxgithub/popper.min.js"></script>
    <script src="/assets/website/js/frontend/quantumultxgithub/bootstrap.min.js"></script>
    <!-- Jquery Mobile Menu -->
    <script src="/assets/website/js/frontend/quantumultxgithub/jquery.slicknav.min.js"></script>
    <!-- Jquery Slick , Owl-Carousel Plugins -->
    <script src="/assets/website/js/frontend/quantumultxgithub/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/quantumultxgithub/slick.min.js"></script>
    <!-- Date Picker -->
    <script src="/assets/website/js/frontend/quantumultxgithub/gijgo.min.js"></script>
    <!-- One Page, Animated-HeadLin -->
    <script src="/assets/website/js/frontend/quantumultxgithub/wow.min.js"></script>
    <script src="/assets/website/js/frontend/quantumultxgithub/animated.headline.js"></script>
    <script src="/assets/website/js/frontend/quantumultxgithub/jquery.magnific-popup.js"></script>
    <!-- Scrollup, nice-select, sticky -->
    <script src="/assets/website/js/frontend/quantumultxgithub/jquery.scrollUp.min.js"></script>
    <script src="/assets/website/js/frontend/quantumultxgithub/jquery.nice-select.min.js"></script>
    <script src="/assets/website/js/frontend/quantumultxgithub/jquery.sticky.js"></script>
    <!-- contact js -->
    <script src="/assets/website/js/frontend/quantumultxgithub/contact.js"></script>
    <script src="/assets/website/js/frontend/quantumultxgithub/jquery.form.js"></script>
    <script src="/assets/website/js/frontend/quantumultxgithub/jquery.validate.min.js"></script>
    <script src="/assets/website/js/frontend/quantumultxgithub/mail-script.js"></script>
    <script src="/assets/website/js/frontend/quantumultxgithub/jquery.ajaxchimp.min.js"></script>
    <!-- Jquery Plugins, main Jquery -->
    <script src="/assets/website/js/frontend/quantumultxgithub/plugins.js"></script>
    <script src="/assets/website/js/frontend/quantumultxgithub/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>